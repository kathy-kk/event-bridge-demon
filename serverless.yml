service: delivery-app-eventbridge-demo
frameworkVersion: '3'
plugins:
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters
  - serverless-plugin-lambda-dead-letter

  

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-southeast-2
  stage: ${opt:stage, 'dev'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - events:DescribeEventBus
        - events:PutEvents
      Resource: arn:aws:events:ap-southeast-2:*:*


custom:
  stackName: ${self:service}-${self:provider.stage}
  eventBusName: ${self:provider.stage}-FoodDeliveryAppEventBus

functions:
  CustomerSupportService:
    name: ${self:custom.stackName}-CustomerSupport
    handler: handler.customerSupport
    deadLetter:
      targetArn: 'arn:aws:sqs:ap-southeast-2:401214556774:deadLetterTest'
    environment:
      EVENT_BUS_NAME: ${self:custom.eventBusName}
    role: CustomerSupportServiceRole
    events:
     - http:
        path: delivery-app-eventbridge-demo
        method: post
        cors: true

  QualitySupportService:
    name: ${self:custom.stackName}-QualitySupportService
    handler: QualitySupportService.handler
  LogisticsSupportService:
    name: ${self:custom.stackName}-LogisticsSupportService
    handler: LogisticsSupportService.handler
  TechSupportService:
    name: ${self:custom.stackName}-TechSupportService
    handler: TechSupportService.handler
    role: sendErrorMessageToDeadLetterRole
    deadLetter:
      targetArn: 'arn:aws:sqs:ap-southeast-2:401214556774:deadLetterTest'

  EventNotificationService:
    handler: EventNotificationService.handler
    role: EventNotificationServiceRole
    deadLetter:
      targetArn: 'arn:aws:sqs:ap-southeast-2:401214556774:deadLetterTest'
    events:
      - stream:
          type: dynamodb
          arn:        
            Fn::GetAtt: 
              - EventStore  
              - StreamArn
          filterPatterns:
            - dynamodb:
                NewImage:
                  type:
                    S:
                      - 'food'

                    

resources:
  Resources:
    FoodDeliveryAppEventBus: 
      Type: AWS::Events::EventBus
      Properties: 
          Name: ${self:custom.eventBusName}

    SupportRequestsForFoodRule: 
      Type: AWS::Events::Rule
      DependsOn: 
        - QualitySupportServiceLambdaFunction
        - FoodDeliveryAppEventBus
      Properties: 
        Name: "SupportRequestsForFood"
        EventBusName: ${self:custom.eventBusName}
        EventPattern:
          detail:
            type: 
             - food
        State: "ENABLED"
        Targets: 
          - Arn: !GetAtt QualitySupportServiceLambdaFunction.Arn
            Id: "FoodHandlerRule"
            DeadLetterConfig:
             Arn: 'arn:aws:sqs:ap-southeast-2:401214556774:deadLetterTest'

    SupportRequestsForDeliveryRule: 
      Type: AWS::Events::Rule
      DependsOn: 
        - LogisticsSupportServiceLambdaFunction
        - FoodDeliveryAppEventBus
      Properties: 
        Name: "SupportRequestsForDelivery"
        EventBusName: ${self:custom.eventBusName}
        EventPattern: 
          detail:
            type: 
             - delivery
        State: "ENABLED"
        Targets: 
          - Arn: !GetAtt LogisticsSupportServiceLambdaFunction.Arn
            Id: "DeliveryHandlerRule"
            DeadLetterConfig:
             Arn: 'arn:aws:sqs:ap-southeast-2:401214556774:deadLetterTest'
  
    SupportRequestsForAppRule: 
      Type: AWS::Events::Rule
      DependsOn: 
        - TechSupportServiceLambdaFunction
        - FoodDeliveryAppEventBus
      Properties: 
        Name: "SupportRequestsForApp"
        EventBusName: ${self:custom.eventBusName}
        EventPattern: 
          detail:
            type: 
             - app
        State: "ENABLED"
        Targets: 
          - Arn: !GetAtt TechSupportServiceLambdaFunction.Arn
            Id: "AppHandlerRule"
            DeadLetterConfig:
             Arn: 'arn:aws:sqs:ap-southeast-2:401214556774:deadLetterTest'

    qualitySupportInvokePermission:
      Type: 'AWS::Lambda::Permission' 
      DependsOn: QualitySupportServiceLambdaFunction
      Properties:
        FunctionName: ${self:custom.stackName}-QualitySupportService
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com

    logisticsSupportInvokePermission:
      Type: 'AWS::Lambda::Permission'
      DependsOn: LogisticsSupportServiceLambdaFunction
      Properties:
        FunctionName: ${self:custom.stackName}-LogisticsSupportService
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com

    techSupportInvokePermission:
      Type: 'AWS::Lambda::Permission'
      DependsOn: TechSupportServiceLambdaFunction
      Properties:
        FunctionName: ${self:custom.stackName}-TechSupportService
        Action: lambda:InvokeFunction
        Principal: events.amazonaws.com
    
    sendErrorMessageToDeadLetterRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: sendSqs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - "sqs:*"
                  Resource: "*"

    EventNotificationServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: eventNotificationPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - "sqs:*"
                  Resource: "*"
                - Effect: Allow
                  Action:
                   - "dynamodb:DescribeStream"
                   - "dynamodb:GetRecords"
                   - "dynamodb:GetShardIterator"
                   - "dynamodb:ListStreams"

                  Resource: "*"
    
    EventInvokeConfig:
      Type: AWS::Lambda::EventInvokeConfig
      DependsOn: TechSupportServiceLambdaFunction
      Properties:
        FunctionName: ${self:custom.stackName}-TechSupportService
        Qualifier: '$LATEST'
        MaximumRetryAttempts: 0

    DeadLetterQueuePolicy: 
      Type: AWS::SQS::QueuePolicy
      DependsOn: 
        - SupportRequestsForAppRule
        - SupportRequestsForDeliveryRule
        - SupportRequestsForFoodRule
      Properties: 
        Queues: 
          - 'https://sqs.ap-southeast-2.amazonaws.com/401214556774/deadLetterTest'
        PolicyDocument: 
          Statement: 
            - Effect: Allow
              Action: 'sqs:SendMessage'
              Resource: 'arn:aws:sqs:ap-southeast-2:401214556774:deadLetterTest'
              Principal:
                Service: events.amazonaws.com


    EventStore:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: EventStore
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    CustomerSupportServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: accessDynamoDb
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeTable
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Resource:
                    - "Fn::GetAtt": [EventStore, Arn]
          - PolicyName: putEvent
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - events:PutEvents
                  Resource:
                    - '*'
          - PolicyName: sendSqs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - '*'
                - Effect: Allow
                  Action:
                    - "sqs:*"
                  Resource: "*"
          

  
                
